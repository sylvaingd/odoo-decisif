# -*- coding: utf-8 -*-################################################################################    OpenERP, Open Source Management Solution#    Copyright (C) 2004-2010 Tiny SPRL (<http://tiny.be>).##    This program is free software: you can redistribute it and/or modify#    it under the terms of the GNU Affero General Public License as#    published by the Free Software Foundation, either version 3 of the#    License, or (at your option) any later version.##    This program is distributed in the hope that it will be useful,#    but WITHOUT ANY WARRANTY; without even the implied warranty of#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the#    GNU Affero General Public License for more details.##    You should have received a copy of the GNU Affero General Public License#    along with this program.  If not, see <http://www.gnu.org/licenses/>.###############################################################################from osv import fields, osvfrom openerp.osv import fields, osvfrom openerp.tools.translate import _import timeimport loggingfrom datetime import datetimefrom openerp import netsvc_logger = logging.getLogger(__name__)class product_template(osv.osv):	_inherit = 'product.template'	_columns={		'wk_point_for_loyalty':fields.related('pos_categ_id','wk_point_for_loyalty',type="integer",string='Loyalty Points',help="How many loyalty points are given to the customer by product sold."),	}product_template()class pos_category(osv.osv):	_inherit = 'pos.category'	_columns={		'wk_point_for_loyalty':fields.integer('Loyalty Points',help="How many loyalty points are given to the customer by product sold under this category."),	}pos_category()class res_partner(osv.osv):	_inherit = 'res.partner'	_columns={		'wk_loyalty_points':fields.integer('Loyalty Points', help='The loyalty points the user won as part of a Loyalty Program'),	}res_partner()class loyalty_management(osv.osv):	_name = 'loyalty.management'	def create(self, cr, uid, vals, context=None):		if vals.get('name','/')=='/':			vals['name'] = self.pool.get('ir.sequence').get(cr, uid, 'rule.list1') or '/'		return super(loyalty_management, self).create(cr, uid, vals, context=context)	_columns={	'name':fields.char('Name',size=100),	'start_date':fields.datetime('Start Date'),	'end_date':fields.datetime('End Date'),	'redeem_rule_list':fields.many2many('redeem.rule.list','rule11','rule22','rule33','Redemption Rule List'),	'minimum_purchase':fields.float('Minimum Purchase amount for which the points can be awarded',help="Minimum Purchase amount for which the points can be awarded."),	'test_amount':fields.float('Test Amount'),	'active':fields.boolean('Active'),	'points':fields.integer('Points'),	'purchase':fields.float('Purchase'),	'currency_id': fields.many2one('res.currency', 'Currency', required=True, help="Currency of your Company."),	'loyality_product_id': fields.many2one('product.product', 'Loyalty Product', domain=[('sale_ok', '=', True),('available_in_pos', '=', True)], help="This Product is used as a Loyalty Product."),	'loyalty_base': fields.selection([('amount', 'Purchase Amount'),('category', 'POS Product Categories'),], 'On the Basis',required=True,readonly=True),	}		_defaults = {		'name':  lambda obj, cr, uid, context: '/',		'start_date':(datetime.now()).strftime('%Y-%m-%d %H:%I:%S'),		'active':True,		'loyalty_base':'category',		'currency_id': lambda self, cr, uid, context: self.pool.get('res.users').browse(cr, uid, uid, context=context).company_id.currency_id.id	}	def get_loyalty_rule(self, cr, uid, context=None):		vals = {}		ids = self.search(cr,uid,[('active','=',True)])		if ids:			vals = self.read(cr, uid, ids[0], [])		return vals		def get_earned_points(self, cr,uid,purchase_amount, context=None):		ids = self.search(cr,uid,[('active','=',True)])		total_earned_points = self.get_points(cr,uid,[ids[0]],{'purchase_amount':purchase_amount})		return total_earned_points		def get_customer_loyality(self, cr,uid,customer_id, context=None):		if customer_id:			partner_obj = self.pool.get("res.partner").browse(cr,uid,customer_id)			loyality_points = partner_obj.wk_loyalty_points			ids = self.search(cr,uid,[('active','=',True)])			discount = self.get_discount(cr,uid,[ids[0]],{'partner_id':customer_id})			return {'discount':discount,'points':loyality_points,'customer':customer_id}		else:			return {'discount':0,'points':0,'customer':0}	def get_voucher_product_id(self, cr, uid, ids=[], context=None):		ids = self.search(cr,uid,[('active','=',True)])		loyality_product_id = self.browse(cr,uid,ids[0]).loyality_product_id.id		return loyality_product_id		def get_discount(self, cr, uid, ids,context=None):		if context is None:			context={}		total_discount = 0		self_obj = self.browse(cr, uid, ids[0])		if not context.has_key('partner_id'):			loyality_points = self_obj.test_amount					else:			customer_id = context['partner_id']			partner_obj = self.pool.get("res.partner").browse(cr,uid,customer_id)			loyality_points = partner_obj.wk_loyalty_points		for line in self_obj.redeem_rule_list:			points_to = line.points_to			points_from = line.points_from			if (loyality_points >= points_from and loyality_points <= points_to):				total_discount = loyality_points*line.discount		if not self_obj.redeem_rule_list:			total_discount = -1		return total_discount	def get_points(self, cr, uid, ids,context=None):		if context is None:			context={}		total_points = 0		self_obj = self.browse(cr, uid, ids[0])		if not context.has_key('purchase_amount'):			purchased = self_obj.test_amount		else:			purchased = context['purchase_amount']		if purchased > self_obj.minimum_purchase:						total_points = (int(purchased/self_obj.purchase))*self_obj.points		return total_points	loyalty_management()class redeem_rule_list(osv.osv):	_name = 'redeem.rule.list'	def create(self, cr, uid, vals, context=None):		if vals.get('name','/')=='/':			vals['name'] = "Rule : "+str(vals.get('points'))+" loyalty points, can be redeem to a discount of "+str(vals.get('discount'))+ " "+str(self.pool.get('res.currency').name_get(cr, uid, vals.get('currency_id'))[0][1])		return super(redeem_rule_list, self).create(cr, uid, vals, context=context)	_columns={	'name':fields.char('Name',size=100,readonly=True),	'rule_name':fields.char('Rule Name',size=100),	'active':fields.boolean('Active'),	'points_from':fields.integer('Loyality Points',required=True),	'points_to':fields.integer('Loyality Points',required=True),	'discount':fields.float('Discount',required=True),	'currency_id': fields.many2one('res.currency', 'Currency', required=True, help="Currency of your Company."),	}	_defaults = {		'active':True,		'name':  lambda obj, cr, uid, context: '/',		'currency_id': lambda self, cr, uid, context: self.pool.get('res.users').browse(cr, uid, uid, context=context).company_id.currency_id.id	}redeem_rule_list()class pos_order(osv.osv):				_inherit="pos.order"	_columns = {	    'wk_loyalty_points': fields.float('Loyalty Points', help='The amount of Loyalty points the customer won or lost with this order'),	}	def _order_fields(self, cr, uid, ui_order, context=None):		fields = super(pos_order,self)._order_fields(cr,uid,ui_order,context)		fields['wk_loyalty_points'] = ui_order['wk_loyalty_points']		return fields		def create_from_ui(self, cr, uid, orders, context=None):		ids = super(pos_order,self).create_from_ui(cr,uid,orders,context=context)		for order in orders:			if order['data']['wk_loyalty_points'] and order['data']['partner_id']:				partner = self.pool.get('res.partner').browse(cr,uid,order['data']['partner_id'], context=context)				if order['data']['redeemTaken']:					remaining_points = order['data']['wk_loyalty_points']				else:					remaining_points = partner['wk_loyalty_points'] + order['data']['wk_loyalty_points']				partner.write({'wk_loyalty_points': remaining_points })		return idspos_order